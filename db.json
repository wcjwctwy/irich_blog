{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/black-blue/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.min.css","path":"css/gitment.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/loading-style.css","path":"css/loading-style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/showshare.css","path":"css/showshare.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/wechat.png","path":"img/wechat.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.js","path":"js/TweenMax.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pace.js","path":"js/pace.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/avatar.ico","path":"img/avatar.ico","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/background/bg.jpg","path":"background/bg.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/avatar1.png","path":"img/avatar1.png","modified":0,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/black-blue/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/black-blue/.gitignore","hash":"a9c180819b3a0fbd3f96d1ae60e83d528c75209a","modified":1543565961766},{"_id":"themes/black-blue/README.md","hash":"2a8b1f207126342c6441491dc1863ced3a6ccad9","modified":1543565961768},{"_id":"themes/black-blue/_config.yml","hash":"e138507fda7601eb5a2b6c692bb5ecac2dd96ef3","modified":1543579568032},{"_id":"themes/black-blue/package.json","hash":"9a0284a7a5c55adbe4de657dfe725924c82eacc3","modified":1543565961925},{"_id":"source/_posts/三、引用类型与值类型.md","hash":"c57394db108489080e3669299d8990c44ebfc060","modified":1543578217265},{"_id":"source/_posts/一、Go环境搭建.md","hash":"bfe80a8ce265fb66487a6de608644fb8179f5e1b","modified":1543577693456},{"_id":"source/_posts/二、slice切片.md","hash":"7c682813854b58055b45b00c7c62e9705610e759","modified":1543578061351},{"_id":"source/_posts/五、反射（reflect）用法.md","hash":"a90b3814dc84f10f6d7f6ffc93206d248d04c8ae","modified":1543578482849},{"_id":"source/_posts/四、const常量中iota用法.md","hash":"c6c28412e4ccb562f3434aae196487db671c87ec","modified":1543578385139},{"_id":"themes/black-blue/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1543565961704},{"_id":"themes/black-blue/.git/config","hash":"ce8e18c277cfbaaf22c0b7f5a9609cfe1b8858e3","modified":1543565961737},{"_id":"themes/black-blue/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1543565646912},{"_id":"themes/black-blue/.git/index","hash":"897026d6cc61fdda04eb075f22b7cd59f10713d2","modified":1543576791176},{"_id":"themes/black-blue/.git/packed-refs","hash":"e7342ca5efb8980e1e290315b5e79bc51524038a","modified":1543565961675},{"_id":"themes/black-blue/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1543565961778},{"_id":"themes/black-blue/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1543565961775},{"_id":"themes/black-blue/languages/en.yml","hash":"4eaeb91a1326a81f908b23a6f9c6989ade8068e5","modified":1543565961780},{"_id":"themes/black-blue/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1543565961783},{"_id":"themes/black-blue/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1543565961786},{"_id":"themes/black-blue/languages/zh-Hans.yml","hash":"a4d4447e31c03d958880a5cd98ef3ca22101a5a3","modified":1543565961789},{"_id":"themes/black-blue/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1543565961792},{"_id":"themes/black-blue/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1543565961797},{"_id":"themes/black-blue/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1543565961794},{"_id":"themes/black-blue/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1543565961904},{"_id":"themes/black-blue/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1543565961910},{"_id":"themes/black-blue/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1543565961907},{"_id":"themes/black-blue/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1543565961912},{"_id":"themes/black-blue/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1543565961915},{"_id":"themes/black-blue/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1543565961918},{"_id":"themes/black-blue/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1543565961921},{"_id":"themes/black-blue/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1543565961923},{"_id":"themes/black-blue/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1543565961928},{"_id":"themes/black-blue/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1543565646916},{"_id":"themes/black-blue/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1543565646920},{"_id":"themes/black-blue/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1543565646923},{"_id":"themes/black-blue/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1543565646926},{"_id":"themes/black-blue/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1543565646929},{"_id":"themes/black-blue/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1543565646934},{"_id":"themes/black-blue/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1543565646937},{"_id":"themes/black-blue/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1543565646941},{"_id":"themes/black-blue/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1543565646945},{"_id":"themes/black-blue/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1543565646950},{"_id":"themes/black-blue/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1543565646953},{"_id":"themes/black-blue/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1543565646956},{"_id":"themes/black-blue/.git/logs/HEAD","hash":"63d74d45221118b7585071bad1a0f8e26128c8f1","modified":1543565961716},{"_id":"themes/black-blue/layout/_partial/after-footer.ejs","hash":"afb7b469317607beca9b1ffbb7982f13887a838d","modified":1543565961801},{"_id":"themes/black-blue/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1543565961811},{"_id":"themes/black-blue/layout/_partial/archive.ejs","hash":"205d21a8be91d6aa99583c4a7572c6b326497960","modified":1543565961815},{"_id":"themes/black-blue/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1543565961819},{"_id":"themes/black-blue/layout/_partial/article.ejs","hash":"3373fbf7b8258b4d73563c345a53099a19615924","modified":1543565961817},{"_id":"themes/black-blue/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1543565961822},{"_id":"themes/black-blue/layout/_partial/case.swig","hash":"6b3d48c86b38a52b997f4967205f78e7e71848c4","modified":1543565961824},{"_id":"themes/black-blue/layout/_partial/footer.ejs","hash":"ec5d494eda8928ce3ca7921d5372577f0dd006ec","modified":1543565961836},{"_id":"themes/black-blue/layout/_partial/head.ejs","hash":"3134d5a3cff62a818a9e73bddf39fdc9a0fc1886","modified":1543565961839},{"_id":"themes/black-blue/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1543565961841},{"_id":"themes/black-blue/layout/_partial/hide-labels.ejs","hash":"61989603078f069fb9a4b68b9c16e221d8a80c14","modified":1543565961844},{"_id":"themes/black-blue/layout/_partial/jquery.ejs","hash":"9f05e92ef912421ac9fb71f41d916269d09c9133","modified":1543565961846},{"_id":"themes/black-blue/layout/_partial/left-col.ejs","hash":"7b1596a15b73e31b8d6171bfa0a99e5cc3bd8901","modified":1543565961849},{"_id":"themes/black-blue/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1543565961852},{"_id":"themes/black-blue/layout/_partial/mobile-nav.ejs","hash":"deb5c373da4d41064abcb2b50389de42970d0150","modified":1543565961854},{"_id":"themes/black-blue/layout/_partial/page.ejs","hash":"7657efab4010092f62fc44b1c7a8f8936af79ec3","modified":1543565961857},{"_id":"themes/black-blue/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1543565961860},{"_id":"themes/black-blue/layout/_partial/post-nav-button.ejs","hash":"9d97c3cb3314c00f96c73cf8daafbac9b75f84bb","modified":1543565961862},{"_id":"themes/black-blue/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1543565961883},{"_id":"themes/black-blue/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1543565961895},{"_id":"themes/black-blue/layout/_partial/toc.ejs","hash":"1646bc7a0be00c279ecfafffc854d49b2edb57a2","modified":1543565961899},{"_id":"themes/black-blue/layout/_partial/work.swig","hash":"7ec7e427bb700ed1ac4f04bc2872645f7c4908e9","modified":1543565961902},{"_id":"themes/black-blue/source/css/gitment.css","hash":"4e10aca6689acb1d000fa52020ad3a89acd2dbdb","modified":1543565961942},{"_id":"themes/black-blue/source/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1543565961945},{"_id":"themes/black-blue/source/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1543565961948},{"_id":"themes/black-blue/source/css/showshare.css","hash":"13d17317db6857b8c3628974d1e4afdc4b1e1a1b","modified":1543565961954},{"_id":"themes/black-blue/source/css/style.css","hash":"67a5038e87ed12baff39aef35bdf36653f8f6afe","modified":1543565961958},{"_id":"themes/black-blue/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1543565961961},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1543565961965},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1543565961971},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1543565961968},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1543565961974},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1543565961977},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1543565961996},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1543565961999},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1543565962002},{"_id":"themes/black-blue/source/img/avatar.png","hash":"1e8c486f5091dd5fec5ea68c4cdf1aeca6aa5d4c","modified":1543576749954},{"_id":"themes/black-blue/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1543565962045},{"_id":"themes/black-blue/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1543565962048},{"_id":"themes/black-blue/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1543565962051},{"_id":"themes/black-blue/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1543565962053},{"_id":"themes/black-blue/source/img/favicon.ico","hash":"b8f5cc35fa1f38e53e4691c0018f3eb9f23faa46","modified":1543576413146},{"_id":"themes/black-blue/source/img/favicon.png","hash":"930572e75827dd8bdd952b442bba89e0b07f6033","modified":1543576803052},{"_id":"themes/black-blue/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1543565962059},{"_id":"themes/black-blue/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1543565962061},{"_id":"themes/black-blue/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1543565962064},{"_id":"themes/black-blue/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1543565962067},{"_id":"themes/black-blue/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1543565962069},{"_id":"themes/black-blue/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1543565962072},{"_id":"themes/black-blue/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1543565962077},{"_id":"themes/black-blue/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1543565962075},{"_id":"themes/black-blue/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1543565962082},{"_id":"themes/black-blue/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1543565962080},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1543565962086},{"_id":"themes/black-blue/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1543565962091},{"_id":"themes/black-blue/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1543565962089},{"_id":"themes/black-blue/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1543565962096},{"_id":"themes/black-blue/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1543565962093},{"_id":"themes/black-blue/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1543565962099},{"_id":"themes/black-blue/source/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1543565962110},{"_id":"themes/black-blue/source/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1543565962118},{"_id":"themes/black-blue/source/js/embed.js","hash":"74ae18956d0037ff76e592f54db1eb1fa682875c","modified":1543565962121},{"_id":"themes/black-blue/source/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1543565962124},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1543565962126},{"_id":"themes/black-blue/source/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1543565962129},{"_id":"themes/black-blue/source/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1543565962132},{"_id":"themes/black-blue/source/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1543565962135},{"_id":"themes/black-blue/source/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1543565962137},{"_id":"themes/black-blue/source/js/plugins.js","hash":"72b87cbf6170f6cbb69bc9b20a7bc494667b514c","modified":1543565962140},{"_id":"themes/black-blue/source/img/avatar.ico","hash":"9745ac0255da234688ea55e31c6d0516d8d70880","modified":1543576519321},{"_id":"themes/black-blue/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1543565962115},{"_id":"themes/black-blue/.git/objects/0e/69ef70fa8d36f5a65d9b58a4ebb1773a7e4f24","hash":"64ff2f1f497e5e8fda93edc71e3e7c3e41ce36be","modified":1543576791171},{"_id":"themes/black-blue/.git/objects/88/139eb2c2af53fc19935de7f4c68e4bdf66bd29","hash":"75f7c781847390502e9120713552ebb40cf5d017","modified":1543576207951},{"_id":"themes/black-blue/.git/objects/be/b4d3e24ae582ed66c6ea8df326b3545b025cf5","hash":"9ef3153ccd38a13aa5d5d94ac4df46c77b87c9c1","modified":1543576573307},{"_id":"themes/black-blue/.git/objects/pack/pack-cd0d2e81759d1a4013d2b8fd9ff1e2f995bc43cd.idx","hash":"280c13c71e8db5d4270633ba803b375da3d9457e","modified":1543565961603},{"_id":"themes/black-blue/.git/refs/heads/master","hash":"1e27de07e1df509278a5d9f0a079b02236d71535","modified":1543565961714},{"_id":"themes/black-blue/layout/_partial/analytics/baidu-analytics.ejs","hash":"ef42cd48d140ae81433c2f54b2b70387a09e5e5c","modified":1543565961806},{"_id":"themes/black-blue/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1543565961809},{"_id":"themes/black-blue/layout/_partial/comments/changyan.ejs","hash":"e154aa36aa78e396a63b119b5fc34061b5813833","modified":1543565961828},{"_id":"themes/black-blue/layout/_partial/comments/disqus.ejs","hash":"ded58c9329c2abbf89ac13eeb83c3924637f852c","modified":1543565961831},{"_id":"themes/black-blue/layout/_partial/comments/gitment.ejs","hash":"732d57f6e87e6db6350cb8144902ed846c27d74e","modified":1543565961833},{"_id":"themes/black-blue/layout/_partial/post/TipTitle.ejs","hash":"bcc474b49972f8d0a4856a3ff62b56f03e0b2e03","modified":1543565961866},{"_id":"themes/black-blue/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1543565961868},{"_id":"themes/black-blue/layout/_partial/post/date.ejs","hash":"d0bcf3e2645300519b710860137e6fbb0340c7c8","modified":1543565961871},{"_id":"themes/black-blue/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1543565961873},{"_id":"themes/black-blue/layout/_partial/post/nav.ejs","hash":"549d1125e68c15dc6dcacb6d2820bfbf09fb19a0","modified":1543565961876},{"_id":"themes/black-blue/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1543565961878},{"_id":"themes/black-blue/layout/_partial/post/title.ejs","hash":"becf55d3d1ce42369ab046f1591e9d89a2240375","modified":1543565961881},{"_id":"themes/black-blue/layout/_partial/share/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1543565961886},{"_id":"themes/black-blue/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1543565961890},{"_id":"themes/black-blue/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1543565961892},{"_id":"themes/black-blue/source/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1543565961934},{"_id":"themes/black-blue/source/background/bg.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1543565961939},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1543565961951},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1543565962006},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1543565962010},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1543565961980},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1543565961983},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1543565961986},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1543565961989},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1543565961991},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1543565961994},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1543565962107},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1543565962015},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1543565962019},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1543565962030},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1543565962033},{"_id":"themes/black-blue/source/img/avatar1.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1543565962038},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1543565962104},{"_id":"themes/black-blue/.git/logs/refs/heads/master","hash":"63d74d45221118b7585071bad1a0f8e26128c8f1","modified":1543565961719},{"_id":"themes/black-blue/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1543565961698},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1543565962027},{"_id":"themes/black-blue/.git/logs/refs/remotes/origin/HEAD","hash":"63d74d45221118b7585071bad1a0f8e26128c8f1","modified":1543565961697},{"_id":"themes/black-blue/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1543565962043},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1543565962023},{"_id":"themes/black-blue/.git/objects/pack/pack-cd0d2e81759d1a4013d2b8fd9ff1e2f995bc43cd.pack","hash":"a2657fd9ba102f5832088fd29a06ffeb1ae8ed7c","modified":1543576787000}],"Category":[{"name":"语言基础","_id":"cjp3zf9ob0002egvla45h5871"}],"Data":[],"Page":[],"Post":[{"title":"三、引用类型与值类型","date":"2018-11-30T11:42:58.000Z","_content":"\n在golang中只有三种引用类型它们分别是切片==slice、字典map、管道channel。其它的全部是值类型==，引用类型可以简单的理解为指针类型，它们都是通过make完成初始化 \n看下面两个例子：\n\n```\n a :=[5]int{2,3,4,5,6}\n b := a\n b[2]=77\n fmt.Println(a, b)\n```\n上面定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化，结果如下： \n\n```\n[2 3 4 5 6] [2 3 77 5 6]\n```\n\n\n但如果是切片则不然\n\n\n```\n    a :=[]int{2,3,4,5,6}\n    b := a\n    b[2]=77\n    fmt.Println(a, b)\n```\na和b本质上指向同一个底层数组\n\n\n```\n[2 3 77 5 6] [2 3 77 5 6]\n```\n\n","source":"_posts/三、引用类型与值类型.md","raw":"---\ntitle: 三、引用类型与值类型\ndate: 2018-11-30 19:42:58\ntags: [Golang]\ncategories: [语言基础]\n---\n\n在golang中只有三种引用类型它们分别是切片==slice、字典map、管道channel。其它的全部是值类型==，引用类型可以简单的理解为指针类型，它们都是通过make完成初始化 \n看下面两个例子：\n\n```\n a :=[5]int{2,3,4,5,6}\n b := a\n b[2]=77\n fmt.Println(a, b)\n```\n上面定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化，结果如下： \n\n```\n[2 3 4 5 6] [2 3 77 5 6]\n```\n\n\n但如果是切片则不然\n\n\n```\n    a :=[]int{2,3,4,5,6}\n    b := a\n    b[2]=77\n    fmt.Println(a, b)\n```\na和b本质上指向同一个底层数组\n\n\n```\n[2 3 77 5 6] [2 3 77 5 6]\n```\n\n","slug":"三、引用类型与值类型","published":1,"updated":"2018-11-30T11:43:37.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp3zf9o30000egvl64ekef5b","content":"<p>在golang中只有三种引用类型它们分别是切片==slice、字典map、管道channel。其它的全部是值类型==，引用类型可以简单的理解为指针类型，它们都是通过make完成初始化<br>看下面两个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a :=[5]int&#123;2,3,4,5,6&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[2]=77</span><br><span class=\"line\">fmt.Println(a, b)</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化，结果如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2 3 4 5 6] [2 3 77 5 6]</span><br></pre></td></tr></table></figure>\n<p>但如果是切片则不然</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a :=[]int&#123;2,3,4,5,6&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[2]=77</span><br><span class=\"line\">fmt.Println(a, b)</span><br></pre></td></tr></table></figure>\n<p>a和b本质上指向同一个底层数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2 3 77 5 6] [2 3 77 5 6]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在golang中只有三种引用类型它们分别是切片==slice、字典map、管道channel。其它的全部是值类型==，引用类型可以简单的理解为指针类型，它们都是通过make完成初始化<br>看下面两个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a :=[5]int&#123;2,3,4,5,6&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[2]=77</span><br><span class=\"line\">fmt.Println(a, b)</span><br></pre></td></tr></table></figure>\n<p>上面定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化，结果如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2 3 4 5 6] [2 3 77 5 6]</span><br></pre></td></tr></table></figure>\n<p>但如果是切片则不然</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a :=[]int&#123;2,3,4,5,6&#125;</span><br><span class=\"line\">b := a</span><br><span class=\"line\">b[2]=77</span><br><span class=\"line\">fmt.Println(a, b)</span><br></pre></td></tr></table></figure>\n<p>a和b本质上指向同一个底层数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2 3 77 5 6] [2 3 77 5 6]</span><br></pre></td></tr></table></figure>\n"},{"title":"一、GO环境安装","date":"2018-11-30T07:44:44.000Z","_content":"\n## GO环境安装\n### 下载go\n下载地址： https://golang.google.cn/dl/  \n### 配置环境变量\n\n配置GOPATH和PATH    \n### GOPROXY配置\n因为国内网络得原因，需要配置GOPROXY  \nGOPROXY=https://goproxy.io\n## 依赖管理工具安装\n### vgo\n下载地址：https://github.com/golang/vgo\n### 简介\n\n```\nvgo是Go语言推出的第三方库管理工具，即将在Go语言新版本中使用。\n\n相信大家都接触过其它语言的第三方库管理工具，比如Java的maven，PHP的composer，Python的pip，Node的npm等。vgo类似于这样的功能，方便Go语言项目管理第三方库。\n```\n==暂时没有在go环境中应用，需要手动安装 且go版本要在11及以上==\n### 安装\n下载zip包，解压 将vendor文件夹下面得所有文件复制到配置得$GOPATH/src下面\n\n```\ncd vgo/path\ngo build -o vgo.exe main.go\n```\n将编译得vgo.exe复制到$GOROOT/bin目录下即可\n\n\n--------------------------------------------------------------------\n### 3、安装开发工具dep  \n//设置环境变量 使用vendor目录GO15VENDOREXPERIMENT=1\n1.安装 \n\n```\ngo get -u github.com/golang/dep/cmd/dep\n```\n\n2.安装验证\n```\n$ dep\ndep is a tool for managing dependencies for Go projectsUsage: dep <command>Commands:  init    Initialize a new project with manifest and lock files\n  status  Report the status of the project‘s dependencies\n  ensure  Ensure a dependency is safely vendored in the project\n  prune   Prune the vendor tree of unused packagesExamples:\n  dep init                               set up a new project\n  dep ensure                             install the project‘s dependencies\n  dep ensure -update                     update the locked versions of all dependencies\n  dep ensure -add github.com/pkg/errors  add a dependency to the projectUse \"dep help [command]\" for more information about a command.\n```\n\n\n```\ngit clone https://github.com/grpc/grpc-go.git D:/Users/wangcongjun/go/src/google.golang.org/grpc\n\ngit clone https://github.com/golang/net.git D:/Users/wangcongjun/go/src/golang.org/x/net\n\ngit clone https://github.com/golang/text.git D:/Users/wangcongjun/go/src/golang.org/x/text\n\ngo get -u github.com/golang/protobuf/proto\n\ngo get -u github.com/golang/protobuf/protoc-gen-go\n\ngit clone https://github.com/google/go-genproto.git D:/Users/wangcongjun/go/src/google.golang.org/genproto\n\ncd D:/Users/wangcongjun/go/src/\n\ngo install google.golang.org/grpc\n```\n\n\n\n","source":"_posts/一、Go环境搭建.md","raw":"---\ntitle: 一、GO环境安装\ndate: 2018-11-30 15:44:44\ntags: [Golang]\ncategories: [语言基础]\n---\n\n## GO环境安装\n### 下载go\n下载地址： https://golang.google.cn/dl/  \n### 配置环境变量\n\n配置GOPATH和PATH    \n### GOPROXY配置\n因为国内网络得原因，需要配置GOPROXY  \nGOPROXY=https://goproxy.io\n## 依赖管理工具安装\n### vgo\n下载地址：https://github.com/golang/vgo\n### 简介\n\n```\nvgo是Go语言推出的第三方库管理工具，即将在Go语言新版本中使用。\n\n相信大家都接触过其它语言的第三方库管理工具，比如Java的maven，PHP的composer，Python的pip，Node的npm等。vgo类似于这样的功能，方便Go语言项目管理第三方库。\n```\n==暂时没有在go环境中应用，需要手动安装 且go版本要在11及以上==\n### 安装\n下载zip包，解压 将vendor文件夹下面得所有文件复制到配置得$GOPATH/src下面\n\n```\ncd vgo/path\ngo build -o vgo.exe main.go\n```\n将编译得vgo.exe复制到$GOROOT/bin目录下即可\n\n\n--------------------------------------------------------------------\n### 3、安装开发工具dep  \n//设置环境变量 使用vendor目录GO15VENDOREXPERIMENT=1\n1.安装 \n\n```\ngo get -u github.com/golang/dep/cmd/dep\n```\n\n2.安装验证\n```\n$ dep\ndep is a tool for managing dependencies for Go projectsUsage: dep <command>Commands:  init    Initialize a new project with manifest and lock files\n  status  Report the status of the project‘s dependencies\n  ensure  Ensure a dependency is safely vendored in the project\n  prune   Prune the vendor tree of unused packagesExamples:\n  dep init                               set up a new project\n  dep ensure                             install the project‘s dependencies\n  dep ensure -update                     update the locked versions of all dependencies\n  dep ensure -add github.com/pkg/errors  add a dependency to the projectUse \"dep help [command]\" for more information about a command.\n```\n\n\n```\ngit clone https://github.com/grpc/grpc-go.git D:/Users/wangcongjun/go/src/google.golang.org/grpc\n\ngit clone https://github.com/golang/net.git D:/Users/wangcongjun/go/src/golang.org/x/net\n\ngit clone https://github.com/golang/text.git D:/Users/wangcongjun/go/src/golang.org/x/text\n\ngo get -u github.com/golang/protobuf/proto\n\ngo get -u github.com/golang/protobuf/protoc-gen-go\n\ngit clone https://github.com/google/go-genproto.git D:/Users/wangcongjun/go/src/google.golang.org/genproto\n\ncd D:/Users/wangcongjun/go/src/\n\ngo install google.golang.org/grpc\n```\n\n\n\n","slug":"一、Go环境搭建","published":1,"updated":"2018-11-30T11:34:53.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp3zf9o80001egvl4je40rpw","content":"<h2 id=\"GO环境安装\"><a href=\"#GO环境安装\" class=\"headerlink\" title=\"GO环境安装\"></a>GO环境安装</h2><h3 id=\"下载go\"><a href=\"#下载go\" class=\"headerlink\" title=\"下载go\"></a>下载go</h3><p>下载地址： <a href=\"https://golang.google.cn/dl/\" target=\"_blank\" rel=\"noopener\">https://golang.google.cn/dl/</a>  </p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>配置GOPATH和PATH    </p>\n<h3 id=\"GOPROXY配置\"><a href=\"#GOPROXY配置\" class=\"headerlink\" title=\"GOPROXY配置\"></a>GOPROXY配置</h3><p>因为国内网络得原因，需要配置GOPROXY<br>GOPROXY=<a href=\"https://goproxy.io\" target=\"_blank\" rel=\"noopener\">https://goproxy.io</a></p>\n<h2 id=\"依赖管理工具安装\"><a href=\"#依赖管理工具安装\" class=\"headerlink\" title=\"依赖管理工具安装\"></a>依赖管理工具安装</h2><h3 id=\"vgo\"><a href=\"#vgo\" class=\"headerlink\" title=\"vgo\"></a>vgo</h3><p>下载地址：<a href=\"https://github.com/golang/vgo\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/vgo</a></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgo是Go语言推出的第三方库管理工具，即将在Go语言新版本中使用。</span><br><span class=\"line\"></span><br><span class=\"line\">相信大家都接触过其它语言的第三方库管理工具，比如Java的maven，PHP的composer，Python的pip，Node的npm等。vgo类似于这样的功能，方便Go语言项目管理第三方库。</span><br></pre></td></tr></table></figure>\n<p>==暂时没有在go环境中应用，需要手动安装 且go版本要在11及以上==</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>下载zip包，解压 将vendor文件夹下面得所有文件复制到配置得$GOPATH/src下面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vgo/path</span><br><span class=\"line\">go build -o vgo.exe main.go</span><br></pre></td></tr></table></figure>\n<p>将编译得vgo.exe复制到$GOROOT/bin目录下即可</p>\n<hr>\n<h3 id=\"3、安装开发工具dep\"><a href=\"#3、安装开发工具dep\" class=\"headerlink\" title=\"3、安装开发工具dep\"></a>3、安装开发工具dep</h3><p>//设置环境变量 使用vendor目录GO15VENDOREXPERIMENT=1<br>1.安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/dep/cmd/dep</span><br></pre></td></tr></table></figure>\n<p>2.安装验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dep</span><br><span class=\"line\">dep is a tool for managing dependencies for Go projectsUsage: dep &lt;command&gt;Commands:  init    Initialize a new project with manifest and lock files</span><br><span class=\"line\">  status  Report the status of the project‘s dependencies</span><br><span class=\"line\">  ensure  Ensure a dependency is safely vendored in the project</span><br><span class=\"line\">  prune   Prune the vendor tree of unused packagesExamples:</span><br><span class=\"line\">  dep init                               set up a new project</span><br><span class=\"line\">  dep ensure                             install the project‘s dependencies</span><br><span class=\"line\">  dep ensure -update                     update the locked versions of all dependencies</span><br><span class=\"line\">  dep ensure -add github.com/pkg/errors  add a dependency to the projectUse &quot;dep help [command]&quot; for more information about a command.</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/grpc/grpc-go.git D:/Users/wangcongjun/go/src/google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/golang/net.git D:/Users/wangcongjun/go/src/golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/golang/text.git D:/Users/wangcongjun/go/src/golang.org/x/text</span><br><span class=\"line\"></span><br><span class=\"line\">go get -u github.com/golang/protobuf/proto</span><br><span class=\"line\"></span><br><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/google/go-genproto.git D:/Users/wangcongjun/go/src/google.golang.org/genproto</span><br><span class=\"line\"></span><br><span class=\"line\">cd D:/Users/wangcongjun/go/src/</span><br><span class=\"line\"></span><br><span class=\"line\">go install google.golang.org/grpc</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"GO环境安装\"><a href=\"#GO环境安装\" class=\"headerlink\" title=\"GO环境安装\"></a>GO环境安装</h2><h3 id=\"下载go\"><a href=\"#下载go\" class=\"headerlink\" title=\"下载go\"></a>下载go</h3><p>下载地址： <a href=\"https://golang.google.cn/dl/\" target=\"_blank\" rel=\"noopener\">https://golang.google.cn/dl/</a>  </p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>配置GOPATH和PATH    </p>\n<h3 id=\"GOPROXY配置\"><a href=\"#GOPROXY配置\" class=\"headerlink\" title=\"GOPROXY配置\"></a>GOPROXY配置</h3><p>因为国内网络得原因，需要配置GOPROXY<br>GOPROXY=<a href=\"https://goproxy.io\" target=\"_blank\" rel=\"noopener\">https://goproxy.io</a></p>\n<h2 id=\"依赖管理工具安装\"><a href=\"#依赖管理工具安装\" class=\"headerlink\" title=\"依赖管理工具安装\"></a>依赖管理工具安装</h2><h3 id=\"vgo\"><a href=\"#vgo\" class=\"headerlink\" title=\"vgo\"></a>vgo</h3><p>下载地址：<a href=\"https://github.com/golang/vgo\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/vgo</a></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vgo是Go语言推出的第三方库管理工具，即将在Go语言新版本中使用。</span><br><span class=\"line\"></span><br><span class=\"line\">相信大家都接触过其它语言的第三方库管理工具，比如Java的maven，PHP的composer，Python的pip，Node的npm等。vgo类似于这样的功能，方便Go语言项目管理第三方库。</span><br></pre></td></tr></table></figure>\n<p>==暂时没有在go环境中应用，需要手动安装 且go版本要在11及以上==</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>下载zip包，解压 将vendor文件夹下面得所有文件复制到配置得$GOPATH/src下面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd vgo/path</span><br><span class=\"line\">go build -o vgo.exe main.go</span><br></pre></td></tr></table></figure>\n<p>将编译得vgo.exe复制到$GOROOT/bin目录下即可</p>\n<hr>\n<h3 id=\"3、安装开发工具dep\"><a href=\"#3、安装开发工具dep\" class=\"headerlink\" title=\"3、安装开发工具dep\"></a>3、安装开发工具dep</h3><p>//设置环境变量 使用vendor目录GO15VENDOREXPERIMENT=1<br>1.安装 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/golang/dep/cmd/dep</span><br></pre></td></tr></table></figure>\n<p>2.安装验证<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dep</span><br><span class=\"line\">dep is a tool for managing dependencies for Go projectsUsage: dep &lt;command&gt;Commands:  init    Initialize a new project with manifest and lock files</span><br><span class=\"line\">  status  Report the status of the project‘s dependencies</span><br><span class=\"line\">  ensure  Ensure a dependency is safely vendored in the project</span><br><span class=\"line\">  prune   Prune the vendor tree of unused packagesExamples:</span><br><span class=\"line\">  dep init                               set up a new project</span><br><span class=\"line\">  dep ensure                             install the project‘s dependencies</span><br><span class=\"line\">  dep ensure -update                     update the locked versions of all dependencies</span><br><span class=\"line\">  dep ensure -add github.com/pkg/errors  add a dependency to the projectUse &quot;dep help [command]&quot; for more information about a command.</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/grpc/grpc-go.git D:/Users/wangcongjun/go/src/google.golang.org/grpc</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/golang/net.git D:/Users/wangcongjun/go/src/golang.org/x/net</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/golang/text.git D:/Users/wangcongjun/go/src/golang.org/x/text</span><br><span class=\"line\"></span><br><span class=\"line\">go get -u github.com/golang/protobuf/proto</span><br><span class=\"line\"></span><br><span class=\"line\">go get -u github.com/golang/protobuf/protoc-gen-go</span><br><span class=\"line\"></span><br><span class=\"line\">git clone https://github.com/google/go-genproto.git D:/Users/wangcongjun/go/src/google.golang.org/genproto</span><br><span class=\"line\"></span><br><span class=\"line\">cd D:/Users/wangcongjun/go/src/</span><br><span class=\"line\"></span><br><span class=\"line\">go install google.golang.org/grpc</span><br></pre></td></tr></table></figure>\n"},{"title":"二、slice切片","date":"2018-11-30T11:39:10.000Z","_content":"##  创建方式\n在创建一个新的切片是都会先创建一个长度为len的数组，并为其开辟一个cap长度为cap的额外空间，所以在cap范围类增加元素，数组的起始地址不会改变，否则会创建一个新的数组，即起始的位置发生改变\n### 数组创建\n\n#### 代码\n```\nintArr:=[...]int{1,2,3,4,5,6,7,9}\ns:=intArr[1:3]\n```\n#### 创建后的slice\nlen为截取的元素长度 即：（3 - 1）  \ncap为截取的起始元素到素组最后一个元素的长度 即：\n（原数组长度：8 - 起始元素1）   \n底层数组： 为原数组的截取的起始元素到素组最后一个元素\n\n### make创建\n\n#### 代码\n```\ns:=make([]int,10,20)\n```\n#### 创建后的slice\nlen为：10  \ncap为：20（在创建时指定）  \n底层数组： 长度为10的数组\n\n### slice扩容\n在cap范围内不会创建新的底层数组  \n超过cap则会创建新的数组 ，生成新的cap和len  超过cap也会的\n","source":"_posts/二、slice切片.md","raw":"---\ntitle: 二、slice切片\ndate: 2018-11-30 19:39:10\ntags: [Golang]\ncategories: [语言基础]\n---\n##  创建方式\n在创建一个新的切片是都会先创建一个长度为len的数组，并为其开辟一个cap长度为cap的额外空间，所以在cap范围类增加元素，数组的起始地址不会改变，否则会创建一个新的数组，即起始的位置发生改变\n### 数组创建\n\n#### 代码\n```\nintArr:=[...]int{1,2,3,4,5,6,7,9}\ns:=intArr[1:3]\n```\n#### 创建后的slice\nlen为截取的元素长度 即：（3 - 1）  \ncap为截取的起始元素到素组最后一个元素的长度 即：\n（原数组长度：8 - 起始元素1）   \n底层数组： 为原数组的截取的起始元素到素组最后一个元素\n\n### make创建\n\n#### 代码\n```\ns:=make([]int,10,20)\n```\n#### 创建后的slice\nlen为：10  \ncap为：20（在创建时指定）  \n底层数组： 长度为10的数组\n\n### slice扩容\n在cap范围内不会创建新的底层数组  \n超过cap则会创建新的数组 ，生成新的cap和len  超过cap也会的\n","slug":"二、slice切片","published":1,"updated":"2018-11-30T11:41:01.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp3zf9od0004egvl3sstbdah","content":"<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><p>在创建一个新的切片是都会先创建一个长度为len的数组，并为其开辟一个cap长度为cap的额外空间，所以在cap范围类增加元素，数组的起始地址不会改变，否则会创建一个新的数组，即起始的位置发生改变</p>\n<h3 id=\"数组创建\"><a href=\"#数组创建\" class=\"headerlink\" title=\"数组创建\"></a>数组创建</h3><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intArr:=[...]int&#123;1,2,3,4,5,6,7,9&#125;</span><br><span class=\"line\">s:=intArr[1:3]</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建后的slice\"><a href=\"#创建后的slice\" class=\"headerlink\" title=\"创建后的slice\"></a>创建后的slice</h4><p>len为截取的元素长度 即：（3 - 1）<br>cap为截取的起始元素到素组最后一个元素的长度 即：<br>（原数组长度：8 - 起始元素1）<br>底层数组： 为原数组的截取的起始元素到素组最后一个元素</p>\n<h3 id=\"make创建\"><a href=\"#make创建\" class=\"headerlink\" title=\"make创建\"></a>make创建</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s:=make([]int,10,20)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建后的slice-1\"><a href=\"#创建后的slice-1\" class=\"headerlink\" title=\"创建后的slice\"></a>创建后的slice</h4><p>len为：10<br>cap为：20（在创建时指定）<br>底层数组： 长度为10的数组</p>\n<h3 id=\"slice扩容\"><a href=\"#slice扩容\" class=\"headerlink\" title=\"slice扩容\"></a>slice扩容</h3><p>在cap范围内不会创建新的底层数组<br>超过cap则会创建新的数组 ，生成新的cap和len  超过cap也会的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建方式\"><a href=\"#创建方式\" class=\"headerlink\" title=\"创建方式\"></a>创建方式</h2><p>在创建一个新的切片是都会先创建一个长度为len的数组，并为其开辟一个cap长度为cap的额外空间，所以在cap范围类增加元素，数组的起始地址不会改变，否则会创建一个新的数组，即起始的位置发生改变</p>\n<h3 id=\"数组创建\"><a href=\"#数组创建\" class=\"headerlink\" title=\"数组创建\"></a>数组创建</h3><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intArr:=[...]int&#123;1,2,3,4,5,6,7,9&#125;</span><br><span class=\"line\">s:=intArr[1:3]</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建后的slice\"><a href=\"#创建后的slice\" class=\"headerlink\" title=\"创建后的slice\"></a>创建后的slice</h4><p>len为截取的元素长度 即：（3 - 1）<br>cap为截取的起始元素到素组最后一个元素的长度 即：<br>（原数组长度：8 - 起始元素1）<br>底层数组： 为原数组的截取的起始元素到素组最后一个元素</p>\n<h3 id=\"make创建\"><a href=\"#make创建\" class=\"headerlink\" title=\"make创建\"></a>make创建</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s:=make([]int,10,20)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建后的slice-1\"><a href=\"#创建后的slice-1\" class=\"headerlink\" title=\"创建后的slice\"></a>创建后的slice</h4><p>len为：10<br>cap为：20（在创建时指定）<br>底层数组： 长度为10的数组</p>\n<h3 id=\"slice扩容\"><a href=\"#slice扩容\" class=\"headerlink\" title=\"slice扩容\"></a>slice扩容</h3><p>在cap范围内不会创建新的底层数组<br>超过cap则会创建新的数组 ，生成新的cap和len  超过cap也会的</p>\n"},{"title":"四、const常量中iota用法","date":"2018-11-30T11:45:49.000Z","_content":"\n### 1、常规用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta = iota\n\t\tb = iota\n\t\tc = iota\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 2 3\n```\n\n### 2、简洁用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta\n\t\tb\n\t\tc\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 2 3\n```\n\n\n### 3、特别用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta ,b = iota ,iota\n\t\tc = iota\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 1 2\n```\n==注意：== 当在一行时a,b同时定义则第一个递增后面不递增\n\n\n","source":"_posts/四、const常量中iota用法.md","raw":"---\ntitle: 四、const常量中iota用法\ndate: 2018-11-30 19:45:49\ntags: [Golang]\ncategories: [语言基础]\n---\n\n### 1、常规用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta = iota\n\t\tb = iota\n\t\tc = iota\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 2 3\n```\n\n### 2、简洁用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta\n\t\tb\n\t\tc\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 2 3\n```\n\n\n### 3、特别用法\n代码：\n```\nfunc constTest() {\n\tconst (\n\t\ti = iota\n\t\ta ,b = iota ,iota\n\t\tc = iota\n\t)\n\tfmt.Println(i, a, b, c)\n}\n```\n输出：\n\n```\n0 1 1 2\n```\n==注意：== 当在一行时a,b同时定义则第一个递增后面不递增\n\n\n","slug":"四、const常量中iota用法","published":1,"updated":"2018-11-30T11:46:25.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp3zf9oe0005egvlb36zjrfi","content":"<h3 id=\"1、常规用法\"><a href=\"#1、常规用法\" class=\"headerlink\" title=\"1、常规用法\"></a>1、常规用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta = iota</span><br><span class=\"line\">\t\tb = iota</span><br><span class=\"line\">\t\tc = iota</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 2 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、简洁用法\"><a href=\"#2、简洁用法\" class=\"headerlink\" title=\"2、简洁用法\"></a>2、简洁用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta</span><br><span class=\"line\">\t\tb</span><br><span class=\"line\">\t\tc</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 2 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、特别用法\"><a href=\"#3、特别用法\" class=\"headerlink\" title=\"3、特别用法\"></a>3、特别用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta ,b = iota ,iota</span><br><span class=\"line\">\t\tc = iota</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 1 2</span><br></pre></td></tr></table></figure>\n<p>==注意：== 当在一行时a,b同时定义则第一个递增后面不递增</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、常规用法\"><a href=\"#1、常规用法\" class=\"headerlink\" title=\"1、常规用法\"></a>1、常规用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta = iota</span><br><span class=\"line\">\t\tb = iota</span><br><span class=\"line\">\t\tc = iota</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 2 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、简洁用法\"><a href=\"#2、简洁用法\" class=\"headerlink\" title=\"2、简洁用法\"></a>2、简洁用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta</span><br><span class=\"line\">\t\tb</span><br><span class=\"line\">\t\tc</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 2 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、特别用法\"><a href=\"#3、特别用法\" class=\"headerlink\" title=\"3、特别用法\"></a>3、特别用法</h3><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func constTest() &#123;</span><br><span class=\"line\">\tconst (</span><br><span class=\"line\">\t\ti = iota</span><br><span class=\"line\">\t\ta ,b = iota ,iota</span><br><span class=\"line\">\t\tc = iota</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tfmt.Println(i, a, b, c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 1 1 2</span><br></pre></td></tr></table></figure>\n<p>==注意：== 当在一行时a,b同时定义则第一个递增后面不递增</p>\n"},{"title":"五、反射（reflect）用法","date":"2018-11-30T11:47:03.000Z","_content":"\n### 基本用法及API\n- func ValueOf\n```\nfunc ValueOf(i interface{}) Value\n```\nValueOf返回一个初始化为i接口保管的具体值的Value，ValueOf(nil)返回Value零值。  \n\n-----\n- func TypeOf\n\n```\nfunc TypeOf(i interface{}) Type\n```\nTypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。  \n\n-----\n\n- func (Value) Type\n\n```\nfunc (v Value) Type() Type\n```\n返回v持有的值的类型的Type表示。   \n==注意：== 其中Value可以获取到Type ,value操作的是指定的数据值其中包含数据的类型和具体的值，Type操作的是数据的类型结构，如：属性。。\n\n---  \n- func (Value) Elem  \n\n```\nfunc (v Value) Elem() Value\n```\nElem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface或Ptr会panic；如果v持有的值为nil，会返回Value零值。  \n==注意：== 这个是Value的Elem方法，通常用这个方法获取数值类型的指针指向的数值\n\n---  \n- func (Type) Field\n\n```\nfunc (Type) Field(i int) StructField\n```\n// 返回索引序列指定的嵌套字段的类型，  \n// 等价于用索引中每个值链式调用本方法，如非结构体将会panic\n\n```\ntype StructField struct {\n    // Name是字段的名字。PkgPath是非导出字段的包路径，对导出字段该字段为\"\"。\n    // 参见http://golang.org/ref/spec#Uniqueness_of_identifiers\n    Name    string\n    PkgPath string\n    Type      Type      // 字段的类型\n    Tag       StructTag // 字段的标签\n    Offset    uintptr   // 字段在结构体中的字节偏移量\n    Index     []int     // 用于Type.FieldByIndex时的索引切片\n    Anonymous bool      // 是否匿名字段\n}\n```\n\n\n### 数值类型反射使用\n只能通过指针才能更改反射后的值，否则传值是复制\n#### 基本类型的值修改  \n代码\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testBasic(i interface{}){\n\t//i实际是一个指针\n\tptrValueOfI := reflect.ValueOf(i)\n\tfmt.Println(ptrValueOfI.Kind())\n\t//获取指针指向的真正的值\n\tvalueOfI := ptrValueOfI.Elem()\n\t//为其更改值\n\tvalueOfI.SetInt(1000)\n}\n\nfunc main() {\n\tn:=1\n\ttestBasic(&n)\n\tfmt.Println(n)\n\n}\n```\n结果：  \n\n```\nptr\n1000\n```\n#### struct类型的属性修改  \n\n代码：\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Student struct {\n\tName string\n\tAge int\n}\n\nfunc test(i interface{}){\n\t//获取指针指向的真正的数值Value\n\tvalueOfI := reflect.ValueOf(i).Elem()\n\t//获取对应的Type这个是用来获取属性方法的\n\ttypeOfI := valueOfI.Type()\n\t//判断是否是struct\n\tif typeOfI.Kind()!=reflect.Struct{\n\t\tfmt.Println(\"except struct\")\n\t\treturn\n\t}\n\t//获取属性的数量\n\tnumField := typeOfI.NumField()\n\t//遍历属性，找到特定的属性进行操作\n\tfor i:=0;i< numField;i++{\n\t\t//获得属性的StructField，次方法不同于Value中的Filed（这个返回的是Field）\n\t\tfield := typeOfI.Field(i)\n\t\t//获取属性名称\n\t\tfieldName := field.Name\n\t\tfmt.Println(fieldName)\n\t\t//找到名为Name的属性进行修改值\n\t\tif fieldName==\"Name\"{\n\t\t\t//改变他的值为jack\n\t\t\tvalueOfI.Field(i).SetString(\"jack\")\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstu:=Student{Name:\"susan\",Age:58}\n\ttest(&stu)\n\tfmt.Println(stu.Name)\n}\n```\n结果：\n\n```\nName\nAge\njack\n```\n\n### 引用类型修改\n##### slice\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testSilce(i interface{}){\n\t//获取对应的Value\n\tvalueOfI := reflect.ValueOf(i)\n\t//获取Kind\n\tfmt.Println(\"kind = \",valueOfI.Kind())\n\t//获取slice长度\n\tfmt.Println(\"len = \",valueOfI.Len())\n\t//获取slice容量\n\tfmt.Println(\"cap = \",valueOfI.Cap())\n\t//获取指定位置的元素\n\tindexValue := valueOfI.Index(0)\n\tfmt.Println(\"index 0 = \",indexValue)\n\t//为指定位置的元素赋值\n\tindexValue.SetInt(300)\n}\n\nfunc main() {\n\ts:=make([]int,10,20)\n\ts[0]=200\n\t//无需传入指针  因为其本身就是引用类型（slice map channel）\n\ttestSilce(s)\n\tfmt.Println(s[0])\n\n}\n```\n结果：\n\n```\nkind =  slice\nlen =  10\ncap =  20\nindex 0 =  200\n300\n\n```\n##### map\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testMap(i interface{}){\n\tvalueOfI := reflect.ValueOf(i)\n\t//获取长度\n\tlenOfI := valueOfI.Len()\n\tfmt.Println(\"len = \",lenOfI)\n\t//获取所有的keys\n\tkeys := valueOfI.MapKeys()\n\tfor i:=0;i<len(keys);i++{\n\t\tkey := keys[i]\n\t\t//获取对应的value\n\t\tvalue := valueOfI.MapIndex(key)\n\t\tfmt.Println(\"key=\",key,\"value=\",value)\n\t\tnum := value.Int()\n\t\t//更改数值\n\t\t//value.SetInt(num*num) 这种不行\n\t\tvalueOfI.SetMapIndex(key,reflect.ValueOf(int(num*num)))\n\t}\n\n}\n\nfunc main() {\n\tm:=make(map[string]int,10)\n\tm[\"a\"]=1\n\tm[\"b\"]=2\n\tm[\"c\"]=3\n\ttestMap(m)\n\tfmt.Println(m)\n}\n\n```\n结果：\n\n```\nlen =  3\nkey= a value= 1\nkey= b value= 2\nkey= c value= 3\nmap[a:1 b:4 c:9]\n```\n### 结构体反射执行方法\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Student struct {\n\tName string\n\tAge  int\n}\n\nfunc (s Student) Print() {\n\tfmt.Println(\"name=\", s.Name, \";age=\", s.Age)\n}\n\nfunc (Student) Plus(a int, b int) int {\n\treturn a + b\n}\n\nfunc testMethod(i interface{}){\n\t//获取指针指向的值\n\tvalueOfI := reflect.ValueOf(i).Elem()\n\t//获取对应的Type\n\ttypeOfI := valueOfI.Type()\n\t//获取方法的数量\n\tmethodNum:= typeOfI.NumMethod()\n\tfmt.Println(\"methodNum=\",methodNum)\n\tfor i:=0;i<methodNum;i++{\n\t\t//获取对应位置的方法\n\t\tmethod := typeOfI.Method(i)\n\t\tmethodName := method.Name\n\t\tfmt.Println(methodName)\n\t\tif methodName ==\"Plus\"{\n\t\t\t//调用Plus\n\t\t\tm := valueOfI.MethodByName(methodName)\n\t\t\t//声明一个切片\n\t\t\targs:=make([]reflect.Value,2)\n\t\t\targs[0]=reflect.ValueOf(78)\n\t\t\targs[1]=reflect.ValueOf(22)\n\t\t\tres := m.Call(args)\n\t\t\t//遍历结果\n\t\t\tfor j:=0;j<len(res);j++ {\n\t\t\t\tfmt.Println(methodName,\" ivoke result\",j+1,\" : \",res[j].Int())\n\t\t\t}\n\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstu := Student{Name: \"susan\", Age: 58}\n\ttestMethod(&stu)\n}\n\n```\n\n结果：\n\n```\nmethodNum= 2\nPlus\nPlus  ivoke result 1  :  100\nPrint\n```\n","source":"_posts/五、反射（reflect）用法.md","raw":"---\ntitle: 五、反射（reflect）用法\ndate: 2018-11-30 19:47:03\ntags: [Golang]\ncategories: [语言基础]\n---\n\n### 基本用法及API\n- func ValueOf\n```\nfunc ValueOf(i interface{}) Value\n```\nValueOf返回一个初始化为i接口保管的具体值的Value，ValueOf(nil)返回Value零值。  \n\n-----\n- func TypeOf\n\n```\nfunc TypeOf(i interface{}) Type\n```\nTypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。  \n\n-----\n\n- func (Value) Type\n\n```\nfunc (v Value) Type() Type\n```\n返回v持有的值的类型的Type表示。   \n==注意：== 其中Value可以获取到Type ,value操作的是指定的数据值其中包含数据的类型和具体的值，Type操作的是数据的类型结构，如：属性。。\n\n---  \n- func (Value) Elem  \n\n```\nfunc (v Value) Elem() Value\n```\nElem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface或Ptr会panic；如果v持有的值为nil，会返回Value零值。  \n==注意：== 这个是Value的Elem方法，通常用这个方法获取数值类型的指针指向的数值\n\n---  \n- func (Type) Field\n\n```\nfunc (Type) Field(i int) StructField\n```\n// 返回索引序列指定的嵌套字段的类型，  \n// 等价于用索引中每个值链式调用本方法，如非结构体将会panic\n\n```\ntype StructField struct {\n    // Name是字段的名字。PkgPath是非导出字段的包路径，对导出字段该字段为\"\"。\n    // 参见http://golang.org/ref/spec#Uniqueness_of_identifiers\n    Name    string\n    PkgPath string\n    Type      Type      // 字段的类型\n    Tag       StructTag // 字段的标签\n    Offset    uintptr   // 字段在结构体中的字节偏移量\n    Index     []int     // 用于Type.FieldByIndex时的索引切片\n    Anonymous bool      // 是否匿名字段\n}\n```\n\n\n### 数值类型反射使用\n只能通过指针才能更改反射后的值，否则传值是复制\n#### 基本类型的值修改  \n代码\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testBasic(i interface{}){\n\t//i实际是一个指针\n\tptrValueOfI := reflect.ValueOf(i)\n\tfmt.Println(ptrValueOfI.Kind())\n\t//获取指针指向的真正的值\n\tvalueOfI := ptrValueOfI.Elem()\n\t//为其更改值\n\tvalueOfI.SetInt(1000)\n}\n\nfunc main() {\n\tn:=1\n\ttestBasic(&n)\n\tfmt.Println(n)\n\n}\n```\n结果：  \n\n```\nptr\n1000\n```\n#### struct类型的属性修改  \n\n代码：\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Student struct {\n\tName string\n\tAge int\n}\n\nfunc test(i interface{}){\n\t//获取指针指向的真正的数值Value\n\tvalueOfI := reflect.ValueOf(i).Elem()\n\t//获取对应的Type这个是用来获取属性方法的\n\ttypeOfI := valueOfI.Type()\n\t//判断是否是struct\n\tif typeOfI.Kind()!=reflect.Struct{\n\t\tfmt.Println(\"except struct\")\n\t\treturn\n\t}\n\t//获取属性的数量\n\tnumField := typeOfI.NumField()\n\t//遍历属性，找到特定的属性进行操作\n\tfor i:=0;i< numField;i++{\n\t\t//获得属性的StructField，次方法不同于Value中的Filed（这个返回的是Field）\n\t\tfield := typeOfI.Field(i)\n\t\t//获取属性名称\n\t\tfieldName := field.Name\n\t\tfmt.Println(fieldName)\n\t\t//找到名为Name的属性进行修改值\n\t\tif fieldName==\"Name\"{\n\t\t\t//改变他的值为jack\n\t\t\tvalueOfI.Field(i).SetString(\"jack\")\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstu:=Student{Name:\"susan\",Age:58}\n\ttest(&stu)\n\tfmt.Println(stu.Name)\n}\n```\n结果：\n\n```\nName\nAge\njack\n```\n\n### 引用类型修改\n##### slice\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testSilce(i interface{}){\n\t//获取对应的Value\n\tvalueOfI := reflect.ValueOf(i)\n\t//获取Kind\n\tfmt.Println(\"kind = \",valueOfI.Kind())\n\t//获取slice长度\n\tfmt.Println(\"len = \",valueOfI.Len())\n\t//获取slice容量\n\tfmt.Println(\"cap = \",valueOfI.Cap())\n\t//获取指定位置的元素\n\tindexValue := valueOfI.Index(0)\n\tfmt.Println(\"index 0 = \",indexValue)\n\t//为指定位置的元素赋值\n\tindexValue.SetInt(300)\n}\n\nfunc main() {\n\ts:=make([]int,10,20)\n\ts[0]=200\n\t//无需传入指针  因为其本身就是引用类型（slice map channel）\n\ttestSilce(s)\n\tfmt.Println(s[0])\n\n}\n```\n结果：\n\n```\nkind =  slice\nlen =  10\ncap =  20\nindex 0 =  200\n300\n\n```\n##### map\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc testMap(i interface{}){\n\tvalueOfI := reflect.ValueOf(i)\n\t//获取长度\n\tlenOfI := valueOfI.Len()\n\tfmt.Println(\"len = \",lenOfI)\n\t//获取所有的keys\n\tkeys := valueOfI.MapKeys()\n\tfor i:=0;i<len(keys);i++{\n\t\tkey := keys[i]\n\t\t//获取对应的value\n\t\tvalue := valueOfI.MapIndex(key)\n\t\tfmt.Println(\"key=\",key,\"value=\",value)\n\t\tnum := value.Int()\n\t\t//更改数值\n\t\t//value.SetInt(num*num) 这种不行\n\t\tvalueOfI.SetMapIndex(key,reflect.ValueOf(int(num*num)))\n\t}\n\n}\n\nfunc main() {\n\tm:=make(map[string]int,10)\n\tm[\"a\"]=1\n\tm[\"b\"]=2\n\tm[\"c\"]=3\n\ttestMap(m)\n\tfmt.Println(m)\n}\n\n```\n结果：\n\n```\nlen =  3\nkey= a value= 1\nkey= b value= 2\nkey= c value= 3\nmap[a:1 b:4 c:9]\n```\n### 结构体反射执行方法\n代码：\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\ntype Student struct {\n\tName string\n\tAge  int\n}\n\nfunc (s Student) Print() {\n\tfmt.Println(\"name=\", s.Name, \";age=\", s.Age)\n}\n\nfunc (Student) Plus(a int, b int) int {\n\treturn a + b\n}\n\nfunc testMethod(i interface{}){\n\t//获取指针指向的值\n\tvalueOfI := reflect.ValueOf(i).Elem()\n\t//获取对应的Type\n\ttypeOfI := valueOfI.Type()\n\t//获取方法的数量\n\tmethodNum:= typeOfI.NumMethod()\n\tfmt.Println(\"methodNum=\",methodNum)\n\tfor i:=0;i<methodNum;i++{\n\t\t//获取对应位置的方法\n\t\tmethod := typeOfI.Method(i)\n\t\tmethodName := method.Name\n\t\tfmt.Println(methodName)\n\t\tif methodName ==\"Plus\"{\n\t\t\t//调用Plus\n\t\t\tm := valueOfI.MethodByName(methodName)\n\t\t\t//声明一个切片\n\t\t\targs:=make([]reflect.Value,2)\n\t\t\targs[0]=reflect.ValueOf(78)\n\t\t\targs[1]=reflect.ValueOf(22)\n\t\t\tres := m.Call(args)\n\t\t\t//遍历结果\n\t\t\tfor j:=0;j<len(res);j++ {\n\t\t\t\tfmt.Println(methodName,\" ivoke result\",j+1,\" : \",res[j].Int())\n\t\t\t}\n\n\t\t}\n\t}\n}\n\nfunc main() {\n\tstu := Student{Name: \"susan\", Age: 58}\n\ttestMethod(&stu)\n}\n\n```\n\n结果：\n\n```\nmethodNum= 2\nPlus\nPlus  ivoke result 1  :  100\nPrint\n```\n","slug":"五、反射（reflect）用法","published":1,"updated":"2018-11-30T11:48:02.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjp3zf9of0006egvlf9ru6bt8","content":"<h3 id=\"基本用法及API\"><a href=\"#基本用法及API\" class=\"headerlink\" title=\"基本用法及API\"></a>基本用法及API</h3><ul>\n<li>func ValueOf<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func ValueOf(i interface&#123;&#125;) Value</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ValueOf返回一个初始化为i接口保管的具体值的Value，ValueOf(nil)返回Value零值。  </p>\n<hr>\n<ul>\n<li>func TypeOf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TypeOf(i interface&#123;&#125;) Type</span><br></pre></td></tr></table></figure>\n<p>TypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。  </p>\n<hr>\n<ul>\n<li>func (Value) Type</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (v Value) Type() Type</span><br></pre></td></tr></table></figure>\n<p>返回v持有的值的类型的Type表示。<br>==注意：== 其中Value可以获取到Type ,value操作的是指定的数据值其中包含数据的类型和具体的值，Type操作的是数据的类型结构，如：属性。。</p>\n<hr>\n<ul>\n<li>func (Value) Elem  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (v Value) Elem() Value</span><br></pre></td></tr></table></figure>\n<p>Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface或Ptr会panic；如果v持有的值为nil，会返回Value零值。<br>==注意：== 这个是Value的Elem方法，通常用这个方法获取数值类型的指针指向的数值</p>\n<hr>\n<ul>\n<li>func (Type) Field</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (Type) Field(i int) StructField</span><br></pre></td></tr></table></figure>\n<p>// 返回索引序列指定的嵌套字段的类型，<br>// 等价于用索引中每个值链式调用本方法，如非结构体将会panic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type StructField struct &#123;</span><br><span class=\"line\">    // Name是字段的名字。PkgPath是非导出字段的包路径，对导出字段该字段为&quot;&quot;。</span><br><span class=\"line\">    // 参见http://golang.org/ref/spec#Uniqueness_of_identifiers</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    PkgPath string</span><br><span class=\"line\">    Type      Type      // 字段的类型</span><br><span class=\"line\">    Tag       StructTag // 字段的标签</span><br><span class=\"line\">    Offset    uintptr   // 字段在结构体中的字节偏移量</span><br><span class=\"line\">    Index     []int     // 用于Type.FieldByIndex时的索引切片</span><br><span class=\"line\">    Anonymous bool      // 是否匿名字段</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值类型反射使用\"><a href=\"#数值类型反射使用\" class=\"headerlink\" title=\"数值类型反射使用\"></a>数值类型反射使用</h3><p>只能通过指针才能更改反射后的值，否则传值是复制</p>\n<h4 id=\"基本类型的值修改\"><a href=\"#基本类型的值修改\" class=\"headerlink\" title=\"基本类型的值修改\"></a>基本类型的值修改</h4><p>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testBasic(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//i实际是一个指针</span><br><span class=\"line\">\tptrValueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\tfmt.Println(ptrValueOfI.Kind())</span><br><span class=\"line\">\t//获取指针指向的真正的值</span><br><span class=\"line\">\tvalueOfI := ptrValueOfI.Elem()</span><br><span class=\"line\">\t//为其更改值</span><br><span class=\"line\">\tvalueOfI.SetInt(1000)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tn:=1</span><br><span class=\"line\">\ttestBasic(&amp;n)</span><br><span class=\"line\">\tfmt.Println(n)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr</span><br><span class=\"line\">1000</span><br></pre></td></tr></table></figure>\n<h4 id=\"struct类型的属性修改\"><a href=\"#struct类型的属性修改\" class=\"headerlink\" title=\"struct类型的属性修改\"></a>struct类型的属性修改</h4><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func test(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取指针指向的真正的数值Value</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i).Elem()</span><br><span class=\"line\">\t//获取对应的Type这个是用来获取属性方法的</span><br><span class=\"line\">\ttypeOfI := valueOfI.Type()</span><br><span class=\"line\">\t//判断是否是struct</span><br><span class=\"line\">\tif typeOfI.Kind()!=reflect.Struct&#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;except struct&quot;)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//获取属性的数量</span><br><span class=\"line\">\tnumField := typeOfI.NumField()</span><br><span class=\"line\">\t//遍历属性，找到特定的属性进行操作</span><br><span class=\"line\">\tfor i:=0;i&lt; numField;i++&#123;</span><br><span class=\"line\">\t\t//获得属性的StructField，次方法不同于Value中的Filed（这个返回的是Field）</span><br><span class=\"line\">\t\tfield := typeOfI.Field(i)</span><br><span class=\"line\">\t\t//获取属性名称</span><br><span class=\"line\">\t\tfieldName := field.Name</span><br><span class=\"line\">\t\tfmt.Println(fieldName)</span><br><span class=\"line\">\t\t//找到名为Name的属性进行修改值</span><br><span class=\"line\">\t\tif fieldName==&quot;Name&quot;&#123;</span><br><span class=\"line\">\t\t\t//改变他的值为jack</span><br><span class=\"line\">\t\t\tvalueOfI.Field(i).SetString(&quot;jack&quot;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tstu:=Student&#123;Name:&quot;susan&quot;,Age:58&#125;</span><br><span class=\"line\">\ttest(&amp;stu)</span><br><span class=\"line\">\tfmt.Println(stu.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name</span><br><span class=\"line\">Age</span><br><span class=\"line\">jack</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型修改\"><a href=\"#引用类型修改\" class=\"headerlink\" title=\"引用类型修改\"></a>引用类型修改</h3><h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h5><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testSilce(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取对应的Value</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\t//获取Kind</span><br><span class=\"line\">\tfmt.Println(&quot;kind = &quot;,valueOfI.Kind())</span><br><span class=\"line\">\t//获取slice长度</span><br><span class=\"line\">\tfmt.Println(&quot;len = &quot;,valueOfI.Len())</span><br><span class=\"line\">\t//获取slice容量</span><br><span class=\"line\">\tfmt.Println(&quot;cap = &quot;,valueOfI.Cap())</span><br><span class=\"line\">\t//获取指定位置的元素</span><br><span class=\"line\">\tindexValue := valueOfI.Index(0)</span><br><span class=\"line\">\tfmt.Println(&quot;index 0 = &quot;,indexValue)</span><br><span class=\"line\">\t//为指定位置的元素赋值</span><br><span class=\"line\">\tindexValue.SetInt(300)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\ts:=make([]int,10,20)</span><br><span class=\"line\">\ts[0]=200</span><br><span class=\"line\">\t//无需传入指针  因为其本身就是引用类型（slice map channel）</span><br><span class=\"line\">\ttestSilce(s)</span><br><span class=\"line\">\tfmt.Println(s[0])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind =  slice</span><br><span class=\"line\">len =  10</span><br><span class=\"line\">cap =  20</span><br><span class=\"line\">index 0 =  200</span><br><span class=\"line\">300</span><br></pre></td></tr></table></figure>\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h5><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testMap(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\t//获取长度</span><br><span class=\"line\">\tlenOfI := valueOfI.Len()</span><br><span class=\"line\">\tfmt.Println(&quot;len = &quot;,lenOfI)</span><br><span class=\"line\">\t//获取所有的keys</span><br><span class=\"line\">\tkeys := valueOfI.MapKeys()</span><br><span class=\"line\">\tfor i:=0;i&lt;len(keys);i++&#123;</span><br><span class=\"line\">\t\tkey := keys[i]</span><br><span class=\"line\">\t\t//获取对应的value</span><br><span class=\"line\">\t\tvalue := valueOfI.MapIndex(key)</span><br><span class=\"line\">\t\tfmt.Println(&quot;key=&quot;,key,&quot;value=&quot;,value)</span><br><span class=\"line\">\t\tnum := value.Int()</span><br><span class=\"line\">\t\t//更改数值</span><br><span class=\"line\">\t\t//value.SetInt(num*num) 这种不行</span><br><span class=\"line\">\t\tvalueOfI.SetMapIndex(key,reflect.ValueOf(int(num*num)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tm:=make(map[string]int,10)</span><br><span class=\"line\">\tm[&quot;a&quot;]=1</span><br><span class=\"line\">\tm[&quot;b&quot;]=2</span><br><span class=\"line\">\tm[&quot;c&quot;]=3</span><br><span class=\"line\">\ttestMap(m)</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len =  3</span><br><span class=\"line\">key= a value= 1</span><br><span class=\"line\">key= b value= 2</span><br><span class=\"line\">key= c value= 3</span><br><span class=\"line\">map[a:1 b:4 c:9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构体反射执行方法\"><a href=\"#结构体反射执行方法\" class=\"headerlink\" title=\"结构体反射执行方法\"></a>结构体反射执行方法</h3><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s Student) Print() &#123;</span><br><span class=\"line\">\tfmt.Println(&quot;name=&quot;, s.Name, &quot;;age=&quot;, s.Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (Student) Plus(a int, b int) int &#123;</span><br><span class=\"line\">\treturn a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func testMethod(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取指针指向的值</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i).Elem()</span><br><span class=\"line\">\t//获取对应的Type</span><br><span class=\"line\">\ttypeOfI := valueOfI.Type()</span><br><span class=\"line\">\t//获取方法的数量</span><br><span class=\"line\">\tmethodNum:= typeOfI.NumMethod()</span><br><span class=\"line\">\tfmt.Println(&quot;methodNum=&quot;,methodNum)</span><br><span class=\"line\">\tfor i:=0;i&lt;methodNum;i++&#123;</span><br><span class=\"line\">\t\t//获取对应位置的方法</span><br><span class=\"line\">\t\tmethod := typeOfI.Method(i)</span><br><span class=\"line\">\t\tmethodName := method.Name</span><br><span class=\"line\">\t\tfmt.Println(methodName)</span><br><span class=\"line\">\t\tif methodName ==&quot;Plus&quot;&#123;</span><br><span class=\"line\">\t\t\t//调用Plus</span><br><span class=\"line\">\t\t\tm := valueOfI.MethodByName(methodName)</span><br><span class=\"line\">\t\t\t//声明一个切片</span><br><span class=\"line\">\t\t\targs:=make([]reflect.Value,2)</span><br><span class=\"line\">\t\t\targs[0]=reflect.ValueOf(78)</span><br><span class=\"line\">\t\t\targs[1]=reflect.ValueOf(22)</span><br><span class=\"line\">\t\t\tres := m.Call(args)</span><br><span class=\"line\">\t\t\t//遍历结果</span><br><span class=\"line\">\t\t\tfor j:=0;j&lt;len(res);j++ &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(methodName,&quot; ivoke result&quot;,j+1,&quot; : &quot;,res[j].Int())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tstu := Student&#123;Name: &quot;susan&quot;, Age: 58&#125;</span><br><span class=\"line\">\ttestMethod(&amp;stu)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methodNum= 2</span><br><span class=\"line\">Plus</span><br><span class=\"line\">Plus  ivoke result 1  :  100</span><br><span class=\"line\">Print</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本用法及API\"><a href=\"#基本用法及API\" class=\"headerlink\" title=\"基本用法及API\"></a>基本用法及API</h3><ul>\n<li>func ValueOf<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func ValueOf(i interface&#123;&#125;) Value</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>ValueOf返回一个初始化为i接口保管的具体值的Value，ValueOf(nil)返回Value零值。  </p>\n<hr>\n<ul>\n<li>func TypeOf</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func TypeOf(i interface&#123;&#125;) Type</span><br></pre></td></tr></table></figure>\n<p>TypeOf返回接口中保存的值的类型，TypeOf(nil)会返回nil。  </p>\n<hr>\n<ul>\n<li>func (Value) Type</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (v Value) Type() Type</span><br></pre></td></tr></table></figure>\n<p>返回v持有的值的类型的Type表示。<br>==注意：== 其中Value可以获取到Type ,value操作的是指定的数据值其中包含数据的类型和具体的值，Type操作的是数据的类型结构，如：属性。。</p>\n<hr>\n<ul>\n<li>func (Value) Elem  </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (v Value) Elem() Value</span><br></pre></td></tr></table></figure>\n<p>Elem返回v持有的接口保管的值的Value封装，或者v持有的指针指向的值的Value封装。如果v的Kind不是Interface或Ptr会panic；如果v持有的值为nil，会返回Value零值。<br>==注意：== 这个是Value的Elem方法，通常用这个方法获取数值类型的指针指向的数值</p>\n<hr>\n<ul>\n<li>func (Type) Field</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func (Type) Field(i int) StructField</span><br></pre></td></tr></table></figure>\n<p>// 返回索引序列指定的嵌套字段的类型，<br>// 等价于用索引中每个值链式调用本方法，如非结构体将会panic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type StructField struct &#123;</span><br><span class=\"line\">    // Name是字段的名字。PkgPath是非导出字段的包路径，对导出字段该字段为&quot;&quot;。</span><br><span class=\"line\">    // 参见http://golang.org/ref/spec#Uniqueness_of_identifiers</span><br><span class=\"line\">    Name    string</span><br><span class=\"line\">    PkgPath string</span><br><span class=\"line\">    Type      Type      // 字段的类型</span><br><span class=\"line\">    Tag       StructTag // 字段的标签</span><br><span class=\"line\">    Offset    uintptr   // 字段在结构体中的字节偏移量</span><br><span class=\"line\">    Index     []int     // 用于Type.FieldByIndex时的索引切片</span><br><span class=\"line\">    Anonymous bool      // 是否匿名字段</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值类型反射使用\"><a href=\"#数值类型反射使用\" class=\"headerlink\" title=\"数值类型反射使用\"></a>数值类型反射使用</h3><p>只能通过指针才能更改反射后的值，否则传值是复制</p>\n<h4 id=\"基本类型的值修改\"><a href=\"#基本类型的值修改\" class=\"headerlink\" title=\"基本类型的值修改\"></a>基本类型的值修改</h4><p>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testBasic(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//i实际是一个指针</span><br><span class=\"line\">\tptrValueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\tfmt.Println(ptrValueOfI.Kind())</span><br><span class=\"line\">\t//获取指针指向的真正的值</span><br><span class=\"line\">\tvalueOfI := ptrValueOfI.Elem()</span><br><span class=\"line\">\t//为其更改值</span><br><span class=\"line\">\tvalueOfI.SetInt(1000)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tn:=1</span><br><span class=\"line\">\ttestBasic(&amp;n)</span><br><span class=\"line\">\tfmt.Println(n)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr</span><br><span class=\"line\">1000</span><br></pre></td></tr></table></figure>\n<h4 id=\"struct类型的属性修改\"><a href=\"#struct类型的属性修改\" class=\"headerlink\" title=\"struct类型的属性修改\"></a>struct类型的属性修改</h4><p>代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func test(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取指针指向的真正的数值Value</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i).Elem()</span><br><span class=\"line\">\t//获取对应的Type这个是用来获取属性方法的</span><br><span class=\"line\">\ttypeOfI := valueOfI.Type()</span><br><span class=\"line\">\t//判断是否是struct</span><br><span class=\"line\">\tif typeOfI.Kind()!=reflect.Struct&#123;</span><br><span class=\"line\">\t\tfmt.Println(&quot;except struct&quot;)</span><br><span class=\"line\">\t\treturn</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//获取属性的数量</span><br><span class=\"line\">\tnumField := typeOfI.NumField()</span><br><span class=\"line\">\t//遍历属性，找到特定的属性进行操作</span><br><span class=\"line\">\tfor i:=0;i&lt; numField;i++&#123;</span><br><span class=\"line\">\t\t//获得属性的StructField，次方法不同于Value中的Filed（这个返回的是Field）</span><br><span class=\"line\">\t\tfield := typeOfI.Field(i)</span><br><span class=\"line\">\t\t//获取属性名称</span><br><span class=\"line\">\t\tfieldName := field.Name</span><br><span class=\"line\">\t\tfmt.Println(fieldName)</span><br><span class=\"line\">\t\t//找到名为Name的属性进行修改值</span><br><span class=\"line\">\t\tif fieldName==&quot;Name&quot;&#123;</span><br><span class=\"line\">\t\t\t//改变他的值为jack</span><br><span class=\"line\">\t\t\tvalueOfI.Field(i).SetString(&quot;jack&quot;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tstu:=Student&#123;Name:&quot;susan&quot;,Age:58&#125;</span><br><span class=\"line\">\ttest(&amp;stu)</span><br><span class=\"line\">\tfmt.Println(stu.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name</span><br><span class=\"line\">Age</span><br><span class=\"line\">jack</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型修改\"><a href=\"#引用类型修改\" class=\"headerlink\" title=\"引用类型修改\"></a>引用类型修改</h3><h5 id=\"slice\"><a href=\"#slice\" class=\"headerlink\" title=\"slice\"></a>slice</h5><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testSilce(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取对应的Value</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\t//获取Kind</span><br><span class=\"line\">\tfmt.Println(&quot;kind = &quot;,valueOfI.Kind())</span><br><span class=\"line\">\t//获取slice长度</span><br><span class=\"line\">\tfmt.Println(&quot;len = &quot;,valueOfI.Len())</span><br><span class=\"line\">\t//获取slice容量</span><br><span class=\"line\">\tfmt.Println(&quot;cap = &quot;,valueOfI.Cap())</span><br><span class=\"line\">\t//获取指定位置的元素</span><br><span class=\"line\">\tindexValue := valueOfI.Index(0)</span><br><span class=\"line\">\tfmt.Println(&quot;index 0 = &quot;,indexValue)</span><br><span class=\"line\">\t//为指定位置的元素赋值</span><br><span class=\"line\">\tindexValue.SetInt(300)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\ts:=make([]int,10,20)</span><br><span class=\"line\">\ts[0]=200</span><br><span class=\"line\">\t//无需传入指针  因为其本身就是引用类型（slice map channel）</span><br><span class=\"line\">\ttestSilce(s)</span><br><span class=\"line\">\tfmt.Println(s[0])</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kind =  slice</span><br><span class=\"line\">len =  10</span><br><span class=\"line\">cap =  20</span><br><span class=\"line\">index 0 =  200</span><br><span class=\"line\">300</span><br></pre></td></tr></table></figure>\n<h5 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h5><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func testMap(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i)</span><br><span class=\"line\">\t//获取长度</span><br><span class=\"line\">\tlenOfI := valueOfI.Len()</span><br><span class=\"line\">\tfmt.Println(&quot;len = &quot;,lenOfI)</span><br><span class=\"line\">\t//获取所有的keys</span><br><span class=\"line\">\tkeys := valueOfI.MapKeys()</span><br><span class=\"line\">\tfor i:=0;i&lt;len(keys);i++&#123;</span><br><span class=\"line\">\t\tkey := keys[i]</span><br><span class=\"line\">\t\t//获取对应的value</span><br><span class=\"line\">\t\tvalue := valueOfI.MapIndex(key)</span><br><span class=\"line\">\t\tfmt.Println(&quot;key=&quot;,key,&quot;value=&quot;,value)</span><br><span class=\"line\">\t\tnum := value.Int()</span><br><span class=\"line\">\t\t//更改数值</span><br><span class=\"line\">\t\t//value.SetInt(num*num) 这种不行</span><br><span class=\"line\">\t\tvalueOfI.SetMapIndex(key,reflect.ValueOf(int(num*num)))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tm:=make(map[string]int,10)</span><br><span class=\"line\">\tm[&quot;a&quot;]=1</span><br><span class=\"line\">\tm[&quot;b&quot;]=2</span><br><span class=\"line\">\tm[&quot;c&quot;]=3</span><br><span class=\"line\">\ttestMap(m)</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len =  3</span><br><span class=\"line\">key= a value= 1</span><br><span class=\"line\">key= b value= 2</span><br><span class=\"line\">key= c value= 3</span><br><span class=\"line\">map[a:1 b:4 c:9]</span><br></pre></td></tr></table></figure>\n<h3 id=\"结构体反射执行方法\"><a href=\"#结构体反射执行方法\" class=\"headerlink\" title=\"结构体反射执行方法\"></a>结构体反射执行方法</h3><p>代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">\t&quot;reflect&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Student struct &#123;</span><br><span class=\"line\">\tName string</span><br><span class=\"line\">\tAge  int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s Student) Print() &#123;</span><br><span class=\"line\">\tfmt.Println(&quot;name=&quot;, s.Name, &quot;;age=&quot;, s.Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (Student) Plus(a int, b int) int &#123;</span><br><span class=\"line\">\treturn a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func testMethod(i interface&#123;&#125;)&#123;</span><br><span class=\"line\">\t//获取指针指向的值</span><br><span class=\"line\">\tvalueOfI := reflect.ValueOf(i).Elem()</span><br><span class=\"line\">\t//获取对应的Type</span><br><span class=\"line\">\ttypeOfI := valueOfI.Type()</span><br><span class=\"line\">\t//获取方法的数量</span><br><span class=\"line\">\tmethodNum:= typeOfI.NumMethod()</span><br><span class=\"line\">\tfmt.Println(&quot;methodNum=&quot;,methodNum)</span><br><span class=\"line\">\tfor i:=0;i&lt;methodNum;i++&#123;</span><br><span class=\"line\">\t\t//获取对应位置的方法</span><br><span class=\"line\">\t\tmethod := typeOfI.Method(i)</span><br><span class=\"line\">\t\tmethodName := method.Name</span><br><span class=\"line\">\t\tfmt.Println(methodName)</span><br><span class=\"line\">\t\tif methodName ==&quot;Plus&quot;&#123;</span><br><span class=\"line\">\t\t\t//调用Plus</span><br><span class=\"line\">\t\t\tm := valueOfI.MethodByName(methodName)</span><br><span class=\"line\">\t\t\t//声明一个切片</span><br><span class=\"line\">\t\t\targs:=make([]reflect.Value,2)</span><br><span class=\"line\">\t\t\targs[0]=reflect.ValueOf(78)</span><br><span class=\"line\">\t\t\targs[1]=reflect.ValueOf(22)</span><br><span class=\"line\">\t\t\tres := m.Call(args)</span><br><span class=\"line\">\t\t\t//遍历结果</span><br><span class=\"line\">\t\t\tfor j:=0;j&lt;len(res);j++ &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(methodName,&quot; ivoke result&quot;,j+1,&quot; : &quot;,res[j].Int())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tstu := Student&#123;Name: &quot;susan&quot;, Age: 58&#125;</span><br><span class=\"line\">\ttestMethod(&amp;stu)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methodNum= 2</span><br><span class=\"line\">Plus</span><br><span class=\"line\">Plus  ivoke result 1  :  100</span><br><span class=\"line\">Print</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjp3zf9oe0005egvlb36zjrfi","category_id":"cjp3zf9ob0002egvla45h5871","_id":"cjp3zf9oj000begvlgri0smhg"},{"post_id":"cjp3zf9o30000egvl64ekef5b","category_id":"cjp3zf9ob0002egvla45h5871","_id":"cjp3zf9ol000fegvle87hpbuz"},{"post_id":"cjp3zf9of0006egvlf9ru6bt8","category_id":"cjp3zf9ob0002egvla45h5871","_id":"cjp3zf9ol000hegvl5t6zkrma"},{"post_id":"cjp3zf9o80001egvl4je40rpw","category_id":"cjp3zf9ob0002egvla45h5871","_id":"cjp3zf9om000jegvlu15qwa9z"},{"post_id":"cjp3zf9od0004egvl3sstbdah","category_id":"cjp3zf9ob0002egvla45h5871","_id":"cjp3zf9om000kegvlq5pvp9k3"}],"PostTag":[{"post_id":"cjp3zf9oe0005egvlb36zjrfi","tag_id":"cjp3zf9oc0003egvlr5182scq","_id":"cjp3zf9oi0009egvl9vljruc6"},{"post_id":"cjp3zf9o30000egvl64ekef5b","tag_id":"cjp3zf9oc0003egvlr5182scq","_id":"cjp3zf9oj000aegvljn3mwzf4"},{"post_id":"cjp3zf9of0006egvlf9ru6bt8","tag_id":"cjp3zf9oc0003egvlr5182scq","_id":"cjp3zf9ok000eegvli1tguujk"},{"post_id":"cjp3zf9o80001egvl4je40rpw","tag_id":"cjp3zf9oc0003egvlr5182scq","_id":"cjp3zf9ol000gegvl5p1tb7n3"},{"post_id":"cjp3zf9od0004egvl3sstbdah","tag_id":"cjp3zf9oc0003egvlr5182scq","_id":"cjp3zf9om000iegvlmcacncbg"}],"Tag":[{"name":"Golang","_id":"cjp3zf9oc0003egvlr5182scq"}]}}